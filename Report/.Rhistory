knitr::opts_chunk$set(echo = TRUE)
if (!require("fs")) install.packages("fs")
library("fs")
rawdatadir=path_wd("..","data")
if(!dir.exists(rawdatadir)) dir.create(rawdatadir,recursive = TRUE)
cnames = read.table(path_wd("..","data","kddcup.names"),
as.is=T, skip=1, sep=":")
download.file('http://kdd.ics.uci.edu/databases/kddcup99/kddcup.data_10_percent.gz', path_wd("..","data","kddcup.data_10_percent.gz"))
download.file('http://kdd.ics.uci.edu/databases/kddcup99/kddcup.testdata.unlabeled_10_percent.gz', path_wd("..","data","kddcup.testdata.unlabeled_10_percent.gz"))
download.file('http://kdd.ics.uci.edu/databases/kddcup99/corrected.gz', path_wd("..","data","corrected.gz"))
download.file('http://kdd.ics.uci.edu/databases/kddcup99/kddcup.names', path_wd("..","data","kddcup.names"))
cnames = read.table(path_wd("..","data","kddcup.names"),
as.is=T, skip=1, sep=":")
kdd_10 = read.csv(path_wd("..","data","kddcup.data_10_percent.gz"))
labeled_test = read.csv(path_wd("..","data","corrected.gz"))
unlabeled_test = read.csv(path_wd("..","data","kddcup.testdata.unlabeled_10_percent.gz"))
datafiles = list(kdd_10, labeled_test, unlabeled_test)
colnames(kdd_10)=c(cnames[,1],"normal")
colnames(labeled_test)=c(cnames[,1],"normal")
colnames(unlabeled_test) = c(cnames[,1])
head(kdd_10)
head(labeled_test)
head(unlabeled_test)
cols.fac <- c(2,3,4,7,12,21,22)
for (file in datafiles) {
sapply(file[,cols.fac],as.factor)
}
v <- 1:41
cols.num <- v[!(v %in% cols.fac)]
for (file in datafiles) {
sapply(file[,cols.num],as.character)
}
for (file in datafiles) {
sapply(file[,cols.num],as.numeric)
}
n = length(kdd_10[,1])
test_sample = sample(1:n, n/10)
kdd_10_train = kdd_10[!(1:n %in% test_sample), ]
kdd_10_test = kdd_10[test_sample,]
dim(kdd_10_test) # 49402 observations
dim(kdd_10_train) # 444618 observations
write.table(kdd_10_train,
path_wd("..","data","kdd_10_train.tab"),
quote=FALSE,row.names=FALSE)
write.table(kdd_10_test,
path_wd("..","data","kdd_10_test.tab"),
quote=FALSE,row.names=FALSE)
write.table(labeled_test,
path_wd("..","data","labeled_test.tab"),
quote=FALSE,row.names=FALSE)
write.table(unlabeled_test,
path_wd("..","data","unlabeled_test.tab"),
quote=FALSE,row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
kdd_10_train =read.table(path_wd("..","data","kdd_10_train.tab"),header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
if (!require("fs")) install.packages("fs")
library("fs")
rawdatadir=path_wd("..","data")
if(!dir.exists(rawdatadir)) dir.create(rawdatadir,recursive = TRUE)
download.file('http://kdd.ics.uci.edu/databases/kddcup99/kddcup.data_10_percent.gz', path_wd("..","data","kddcup.data_10_percent.gz"))
download.file('http://kdd.ics.uci.edu/databases/kddcup99/kddcup.testdata.unlabeled_10_percent.gz', path_wd("..","data","kddcup.testdata.unlabeled_10_percent.gz"))
download.file('http://kdd.ics.uci.edu/databases/kddcup99/corrected.gz', path_wd("..","data","corrected.gz"))
download.file('http://kdd.ics.uci.edu/databases/kddcup99/kddcup.names', path_wd("..","data","kddcup.names"))
cnames = read.table(path_wd("..","data","kddcup.names"),
as.is=T, skip=1, sep=":")
kdd_10 = read.csv(path_wd("..","data","kddcup.data_10_percent.gz"))
labeled_test = read.csv(path_wd("..","data","corrected.gz"))
unlabeled_test = read.csv(path_wd("..","data","kddcup.testdata.unlabeled_10_percent.gz"))
datafiles = list(kdd_10, labeled_test, unlabeled_test)
colnames(kdd_10)=c(cnames[,1],"normal")
colnames(labeled_test)=c(cnames[,1],"normal")
colnames(unlabeled_test) = c(cnames[,1])
head(kdd_10)
head(labeled_test)
head(unlabeled_test)
cols.fac <- c(2,3,4,7,12,21,22)
for (file in datafiles) {
sapply(file[,cols.fac],as.factor)
}
v <- 1:41
cols.num <- v[!(v %in% cols.fac)]
for (file in datafiles) {
sapply(file[,cols.num],as.character)
}
for (file in datafiles) {
sapply(file[,cols.num],as.numeric)
}
n = length(kdd_10[,1])
test_sample = sample(1:n, n/10)
kdd_10_train = kdd_10[!(1:n %in% test_sample), ]
kdd_10_test = kdd_10[test_sample,]
dim(kdd_10_test) # 49402 observations
dim(kdd_10_train) # 444618 observations
write.table(kdd_10_train,
path_wd("..","data","kdd_10_train.tab"),
quote=FALSE,row.names=FALSE)
unique(labelled_test$normal)
unique(labeled_test$normal)
unique(labeled_test$normal)
attack_types <- unique(labeled_test$normal)
length(attack_types)
for (file in datafiles) {
file$class = rep('empty', length(file$service) )
}
rep?
@
?reo
?rep
length(kdd_10$service)
for (file in datafiles) {
empty_class_vector = rep('empty', length(file$service))
file$class = empty_class_vector
}
?length
for (file in datafiles) {
empty_class_vector = rep('empty', length(file$service))
file = cbind(file, empty_class_vector)
}
for (file in datafiles) {
empty_class_vector = rep(0, length(file$service))
file = cbind(file, empty_class_vector)
}
for (file in datafiles) {
empty_class_vector = rep(0, n = length(file$service))
file = cbind(file, empty_class_vector)
}
for (file in datafiles) {
empty_class_vector = rep(0, n = length(file$service))
file$class = empty_class_vector
}
for (file in datafiles[1,2]) {
empty_class_vector = rep(0, n = length(file$service))
file$class = empty_class_vector
for (i in 1:length(file$service)){
if file[]
for (file in datafiles[1,2]) {
empty_class_vector = rep(0, n = length(file$service))
file$class = empty_class_vector
for (i in 1:length(file$service)){
if file[i, 'normal'] == 'normal'{
attack_types <- unique(labeled_test$normal)
attack_types
length(attack_types)
attack_types <- unique(labeled_test$normal, kdd_10$normal)
attack_types1 <- unique(labeled_test$normal)
attack_types2 <- unique(kdd_10$normal)
attack_types <- unique(c(attack_types1, attack_types2))
attack_types
length(attack_types)
attack_types1 <- unique(labeled_test$normal)
attack_types2 <- unique(kdd_10$normal)
attack_types <- unique(c(attack_types1, attack_types2))
attack_types
length(attack_types1)
length(attack_types2)
length(attack_types)
DDoS = c('neptune.', 'smurf.', 'pod.', 'teardrop.', 'land.', "back.", "apache2.", "udpstorm.", "processtable.", "mailbomb.")
UR2 = c("buffer_overflow.","loadmodule.", "perl.", "rootkit.", "xterm.", "ps.", "httptunnel.", "sqlattack.", "worm.", "snmpguess." )
R2L = c("guess_passwd.", "ftp_write.", "imap.", "phf.", "multihop.", "warezmaster.", "warezclient.", "snmpgetattack.", "named.", "xlock." , "xsnoop.", "sendmail." )
Probe = c("ipsweep.", "portsweep.", "nmap.", "satan." , "saint.", "mscan.")
length(DDos) + length(UR2) + length(R2L) + length(Probe) + 1
DDoS = c('neptune.', 'smurf.', 'pod.', 'teardrop.', 'land.', "back.", "apache2.", "udpstorm.", "processtable.", "mailbomb.")
UR2 = c("buffer_overflow.","loadmodule.", "perl.", "rootkit.", "xterm.", "ps.", "httptunnel.", "sqlattack.", "worm.", "snmpguess." )
R2L = c("guess_passwd.", "ftp_write.", "imap.", "phf.", "multihop.", "warezmaster.", "warezclient.", "snmpgetattack.", "named.", "xlock." , "xsnoop.", "sendmail." )
Probe = c("ipsweep.", "portsweep.", "nmap.", "satan." , "saint.", "mscan.")
length(DDoS) + length(UR2) + length(R2L) + length(Probe) + 1
for (file in datafiles[1,2]) {
empty_class_vector = rep(0, n = length(file$service))
file$class = empty_class_vector
}
DDoS = c('neptune.', 'smurf.', 'pod.', 'teardrop.', 'land.', "back.", "apache2.", "udpstorm.", "processtable.", "mailbomb.")
UR2 = c("buffer_overflow.","loadmodule.", "perl.", "rootkit.", "xterm.", "ps.", "httptunnel.", "sqlattack.", "worm.", "snmpguess." )
R2L = c("guess_passwd.", "ftp_write.", "imap.", "phf.", "multihop.", "warezmaster.", "warezclient.", "snmpgetattack.", "named.", "xlock." , "xsnoop.", "sendmail." )
Probe = c("ipsweep.", "portsweep.", "nmap.", "satan." , "saint.", "mscan.")
length(DDoS) + length(UR2) + length(R2L) + length(Probe) + 1
for (file in c(kdd_10, labeled_test)) {
empty_class_vector = rep(0, n = length(file$service))
file$class = empty_class_vector
}
DDoS = c('neptune.', 'smurf.', 'pod.', 'teardrop.', 'land.', "back.", "apache2.", "udpstorm.", "processtable.", "mailbomb.")
UR2 = c("buffer_overflow.","loadmodule.", "perl.", "rootkit.", "xterm.", "ps.", "httptunnel.", "sqlattack.", "worm.", "snmpguess." )
R2L = c("guess_passwd.", "ftp_write.", "imap.", "phf.", "multihop.", "warezmaster.", "warezclient.", "snmpgetattack.", "named.", "xlock." , "xsnoop.", "sendmail." )
Probe = c("ipsweep.", "portsweep.", "nmap.", "satan." , "saint.", "mscan.")
length(DDoS) + length(UR2) + length(R2L) + length(Probe) + 1
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
DDoS = c('neptune.', 'smurf.', 'pod.', 'teardrop.', 'land.', "back.", "apache2.", "udpstorm.", "processtable.", "mailbomb.")
UR2 = c("buffer_overflow.","loadmodule.", "perl.", "rootkit.", "xterm.", "ps.", "httptunnel.", "sqlattack.", "worm.", "snmpguess.", "spy." )
R2L = c("guess_passwd.", "ftp_write.", "imap.", "phf.", "multihop.", "warezmaster.", "warezclient.", "snmpgetattack.", "named.", "xlock." , "xsnoop.", "sendmail." )
Probe = c("ipsweep.", "portsweep.", "nmap.", "satan." , "saint.", "mscan.")
length(DDoS) + length(UR2) + length(R2L) + length(Probe) + 1
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.')
kdd_10[i, 'class'] = 'normal'
}
?if
;
?? if
;
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
}
ifelse(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
}
if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
}
if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
}
if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
}
if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
DDoS = c('neptune.', 'smurf.', 'pod.', 'teardrop.', 'land.', "back.", "apache2.", "udpstorm.", "processtable.", "mailbomb.")
UR2 = c("buffer_overflow.","loadmodule.", "perl.", "rootkit.", "xterm.", "ps.", "httptunnel.", "sqlattack.", "worm.", "snmpguess.", "spy." )
R2L = c("guess_passwd.", "ftp_write.", "imap.", "phf.", "multihop.", "warezmaster.", "warezclient.", "snmpgetattack.", "named.", "xlock." , "xsnoop.", "sendmail." )
Probe = c("ipsweep.", "portsweep.", "nmap.", "satan." , "saint.", "mscan.")
length(DDoS) + length(UR2) + length(R2L) + length(Probe) + 1
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
if (!require("fs")) install.packages("fs")
library("fs")
if (!require("magittr")) install.packages("magittr")
library("magittr")
if (!require("fs")) install.packages("fs")
library("fs")
if (!require("magrittr")) install.packages("magrittr")
library("magrittr")
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
#kdd_10$class = rep(0, n = length(kdd_10$service))
#labeled_test$class = rep(0, n = length(labeled_test$service))
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% Probe] = 'probe'
})
unique(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
which(kdd_10$class == 0)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
which(kdd_class == NA)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
which(kdd_10$class == NA)
head(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
head(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
head(kdd_10)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal.")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
head(kdd_10)
unique(kdd_10$class)
unique(labeled_test$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal.")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
labeled_test <- within(labeled_test, {
class = 0
class[normal %in% c("normal.")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
unique(labeled_test$class)
n = length(kdd_10[,1])
test_sample = sample(1:n, n/10)
kdd_10_train = kdd_10[!(1:n %in% test_sample), ]
kdd_10_test = kdd_10[test_sample,]
dim(kdd_10_test) # 49402 observations
dim(kdd_10_train) # 444618 observations
write.table(kdd_10_train,
path_wd("..","data","kdd_10_train.tab"),
quote=FALSE,row.names=FALSE)
write.table(kdd_10_test,
path_wd("..","data","kdd_10_test.tab"),
quote=FALSE,row.names=FALSE)
write.table(labeled_test,
path_wd("..","data","labeled_test.tab"),
quote=FALSE,row.names=FALSE)
write.table(unlabeled_test,
path_wd("..","data","unlabeled_test.tab"),
quote=FALSE,row.names=FALSE)
