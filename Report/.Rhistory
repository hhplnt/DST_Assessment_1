kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
kdd_10$class = rep(0, n = length(kdd_10$service))
labeled_test$class = rep(0, n = length(labeled_test$service))
for(i in 1:length(kdd_10)){
if(kdd_10[i, 'normal'] == 'normal.') {
kdd_10[i, 'class'] = 'normal'
} else if(kdd_10[i, 'normal'] %in% DDoS) {
kdd_10[i, 'class'] = 'DDoS'
} else if(kdd_10[i, 'normal'] %in% UR2) {
kdd_10[i, 'class'] = 'UR2'
} else if(kdd_10[i, 'normal'] %in% R2L) {
kdd_10[i, 'class'] = 'R2L'
} else if(kdd_10[i, 'normal'] %in% Probe) {
kdd_10[i, 'class'] = 'Probe'
}
}
unique(kdd_10$class)
#kdd_10$class = rep(0, n = length(kdd_10$service))
#labeled_test$class = rep(0, n = length(labeled_test$service))
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% Probe] = 'probe'
})
unique(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
which(kdd_10$class == 0)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
which(kdd_class == NA)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
which(kdd_10$class == NA)
head(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
head(kdd_10$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
head(kdd_10)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal.")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
head(kdd_10)
unique(kdd_10$class)
unique(labeled_test$class)
kdd_10 <- within(kdd_10, {
class = 0
class[normal %in% c("normal.")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
labeled_test <- within(labeled_test, {
class = 0
class[normal %in% c("normal.")] = 'normal'
class[normal %in% DDoS] = 'DDoS'
class[normal %in% UR2] = 'UR2'
class[normal %in% R2L] = 'R2L'
class[normal %in% Probe] = 'Probe'
})
unique(kdd_10$class)
unique(labeled_test$class)
n = length(kdd_10[,1])
test_sample = sample(1:n, n/10)
kdd_10_train = kdd_10[!(1:n %in% test_sample), ]
kdd_10_test = kdd_10[test_sample,]
dim(kdd_10_test) # 49402 observations
dim(kdd_10_train) # 444618 observations
write.table(kdd_10_train,
path_wd("..","data","kdd_10_train.tab"),
quote=FALSE,row.names=FALSE)
write.table(kdd_10_test,
path_wd("..","data","kdd_10_test.tab"),
quote=FALSE,row.names=FALSE)
write.table(labeled_test,
path_wd("..","data","labeled_test.tab"),
quote=FALSE,row.names=FALSE)
write.table(unlabeled_test,
path_wd("..","data","unlabeled_test.tab"),
quote=FALSE,row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
kdd_10_test =read.table(path_wd("..","data","kdd_10_test.tab"),header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
if (!require("fs")) install.packages("fs")
library("fs")
if (!require("magrittr")) install.packages("magrittr")
library("magrittr")
kdd_10_test =read.table(path_wd("..","data","kdd_10_test.tab"),header=TRUE)
kdd_10_test =read.table(path_wd("..","data","labeled_test.tab"),header=TRUE)
if (!require("tsne")) install.packages("tsne")
if (!require("knitr")) install.packages("knitr")
if (!require("gridExtra")) install.packages("gridExtra")
if (!require("caret")) install.packages("caret")
if (!require("class")) install.packages("class")
if (!require("dplyr")) install.packages("dplyr")
if (!require("caTools")) install.packages("caTools")
if (!require("lsa")) install.packages("lsa")
if (!require("e1071")) install.packages('e1071')
if (!require("klaR")) install.packages('klaR')
if (!require("xgboost")) install.packages('xgboost')
if (!require("archdata")) install.packages('archdata')
if (!require("fs")) install.packages("fs")
library("fs")
library("tsne")
library("knitr")
library(gridExtra)
library(caret)
library(class)
library(dplyr)
library(caTools)
library(lsa)
library(e1071)
library(klaR)
library("xgboost")
library("archdata")
train <- train_set
pred <- predict(nb.m1, newdata = test_features)
# set up 5-fold cross validation procedure
train_control <- trainControl(
method = "cv",
number = 5,
savePredictions = TRUE
)
# Train model
nb.m1 <- train(
x = train_features,
y = train_label,
method = "nb",
trControl = train_control
)
dim(kdd_10_train)
head(kdd_10_train)
for (col in kdd_10_train){
print(is.null(col))
}
kdd_10_train <- unique(kdd_10_train) #remove duplicate rows
kdd_10_train <- kdd_10_train[ - as.numeric(which(apply(kdd_10_train, 2, var) == 0))] #removing any zero variance features
dim(kdd_10_train)
table(kdd_10_train$class)
prop.table(table(kdd_10_train$class))
plot(table(kdd_10_train$class))
set.seed(123)
kdd_10_train = kdd_10_train[, -40]
split = sample.split(kdd_10_train$class, SplitRatio = 0.75)
train_set = subset(kdd_10_train, split == TRUE)
test_set = subset(kdd_10_train, split == FALSE)
best_model <- xgb.train(params = xgb_params,
data = data_matrix,
nrounds = nround)
train <- train_set
for (i in c(2,3,4, 40)){
train[,i] = as.numeric(as.factor(train[,i]))
}
table(train_set$class)
table(train$class)
train$class = train$class - 1
summary(train)
#making xgboost matrix
data_label <- train[,"class"]
data_matrix <- xgb.DMatrix(data = as.matrix(train), label = data_label)
#CV
numberOfClasses <- length(unique(train$class))
xgb_params <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = numberOfClasses)
nround    <- 50 # number of XGBoost rounds
cv.nfold  <- 5
# Fit XGB models and save the out of fold predictions
cv_model <- xgb.cv(params = xgb_params,
data = data_matrix,
nrounds = nround,
nfold = cv.nfold,
verbose = FALSE,
prediction = TRUE)
# Prediction
prediction <- data.frame(cv_model$pred) %>%
mutate(max_prob = max.col(., ties.method = "last"),
label = data_label + 1)
head(prediction)
confusionMatrix(factor(prediction$max_prob),
factor(prediction$label),
mode = "everything")
best_model <- xgb.train(params = xgb_params,
data = data_matrix,
nrounds = nround)
#Formatting
test <- test_set
for (i in c(2,3,4, 40)){
test[,i] = as.numeric(as.factor(test[,i]))
}
test$class = test$class - 1
summary(test)
#making xgboost matrix
label <- test[,"class"]
test_matrix <- xgb.DMatrix(data = as.matrix(test), label = label)
#Prediction
pred <- predict(best_model, test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label = label + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
for (col in kdd_10_train){
print(is.null(col))
}
kdd_10_train <- unique(kdd_10_train) #remove duplicate rows
#Which features have 0 variance:
which(apply(kdd_10_train, 2, var) == 0)
kdd_10_train <- kdd_10_train[ - as.numeric(which(apply(kdd_10_train, 2, var) == 0))] #removing zero variance features
dim(kdd_10_train)
View(kdd_10_train)
kdd_10_train =read.table(path_wd("..","data","kdd_10_train.tab"),header=TRUE)
dim(kdd_10_train)
head(kdd_10_train)
for (col in kdd_10_train){
print(is.null(col))
}
kdd_10_train <- unique(kdd_10_train) #remove duplicate rows
#Which features have 0 variance:
which(apply(kdd_10_train, 2, var) == 0)
kdd_10_train <- kdd_10_train[ ,- as.numeric(which(apply(kdd_10_train, 2, var) == 0))] #removing zero variance features
dim(kdd_10_train)
kdd_10_test =read.table(path_wd("..","data","kdd_10_test.tab"),header=TRUE)
labeled_test =read.table(path_wd("..","data","labeled_test.tab"),header=TRUE)
kdd_10_test <- kdd_10_test[,-c(20,21,42)] #removing the same columns as in training
labeled_test<- labeled_test[,-c(20,21,42)]
kdd_10_test =read.table(path_wd("..","data","kdd_10_test.tab"),header=TRUE)
labeled_test =read.table(path_wd("..","data","labeled_test.tab"),header=TRUE)
table(kdd_10_test$class)
table(labeled_test$class)
kdd_10_test <- kdd_10_test[,-c(20,21,42)] #removing the same columns as in training
labeled_test<- labeled_test[,-c(20,21,42)]
for (i in c(2,3,4, 40)){
kdd_10_test[,i] = as.numeric(as.factor(kdd_10_test[,i]))
}
kdd_10_test$class = kdd_10_test$class - 1
for (i in c(2,3,4, 40)){
labeled_test[,i] = as.numeric(as.factor(labeled_test[,i]))
}
labeled_test$class = labeled_test$class - 1
#making xgboost matrices
labeled_test_matrix <- xgb.DMatrix(data = as.matrix(labeled_test), label = labeled_test$class)
kdd_10_test_matrix <- xgb.DMatrix(data = as.matrix(kdd_10_test), label = kdd_10_test$class)
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label = label + 1,
max_prob = max.col(., "last"))
#Formatting
test <- test_set
for (i in c(2,3,4, 40)){
test[,i] = as.numeric(as.factor(test[,i]))
}
test$class = test$class - 1
summary(test)
#making xgboost matrix
label <- test[,"class"]
test_matrix <- xgb.DMatrix(data = as.matrix(test), label = label)
#Prediction
pred <- predict(best_model, test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label = label + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
kdd_10_test <- kdd_10_test[,-c(20,21,42)] #removing the same columns as in training
labeled_test<- labeled_test[,-c(20,21,42)]
for (i in c(2,3,4, 40)){
kdd_10_test[,i] = as.numeric(as.factor(kdd_10_test[,i]))
}
kdd_10_test <- kdd_10_test[,-c(20,21,42)] #removing the same columns as in training
labeled_test<- labeled_test[,-c(20,21,42)]
for (i in c(2,3,4, 40)){
kdd_10_test[,i] = as.numeric(as.factor(kdd_10_test[,i]))
}
kdd_10_test =read.table(path_wd("..","data","kdd_10_test.tab"),header=TRUE)
labeled_test =read.table(path_wd("..","data","labeled_test.tab"),header=TRUE)
table(kdd_10_test$class)
table(labeled_test$class)
kdd_10_test <- kdd_10_test[,-c(20,21,42)] #removing the same columns as in training
labeled_test<- labeled_test[,-c(20,21,42)]
for (i in c(2,3,4, 40)){
kdd_10_test[,i] = as.numeric(as.factor(kdd_10_test[,i]))
}
kdd_10_test$class = kdd_10_test$class - 1
for (i in c(2,3,4, 40)){
labeled_test[,i] = as.numeric(as.factor(labeled_test[,i]))
}
labeled_test$class = labeled_test$class - 1
#making xgboost matrices
labeled_test_matrix <- xgb.DMatrix(data = as.matrix(labeled_test), label = labeled_test$class)
kdd_10_test_matrix <- xgb.DMatrix(data = as.matrix(kdd_10_test), label = kdd_10_test$class)
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label = label + 1,
max_prob = max.col(., "last"))
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(labeled_test$class = labeled_test$class + 1,
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(kdd_10_test$class = kdd_10_test$class + 1,
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(class = class + 1,
max_prob = max.col(., "last"))
kdd_10_test =read.table(path_wd("..","data","kdd_10_test.tab"),header=TRUE)
labeled_test =read.table(path_wd("..","data","labeled_test.tab"),header=TRUE)
table(kdd_10_test$class)
table(labeled_test$class)
kdd_10_test <- kdd_10_test[,-c(20,21,42)] #removing the same columns as in training
labeled_test<- labeled_test[,-c(20,21,42)]
for (i in c(2,3,4, 40)){
kdd_10_test[,i] = as.numeric(as.factor(kdd_10_test[,i]))
}
kdd_10_test$class = kdd_10_test$class - 1
label_1 = kdd_10_test$class
for (i in c(2,3,4, 40)){
labeled_test[,i] = as.numeric(as.factor(labeled_test[,i]))
}
labeled_test$class = labeled_test$class - 1
label_2 = labeled_test$class
#making xgboost matrices
labeled_test_matrix <- xgb.DMatrix(data = as.matrix(labeled_test), label = label_2)
kdd_10_test_matrix <- xgb.DMatrix(data = as.matrix(kdd_10_test), label = label_1)
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label_1 = label_1 + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
pred <- predict(best_model, labeled_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label_2 = label_2 + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
rawdatadir=path_wd("..","performance")
if(!dir.exists(rawdatadir)) dir.create(rawdatadir,recursive = TRUE)
capture.output(
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything"),
file = path_wd("..","performance","labeled_perf"))
rawdatadir=path_wd("..","performance")
if(!dir.exists(rawdatadir)) dir.create(rawdatadir,recursive = TRUE)
capture.output(
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything"),
file = path_wd("..","performance","labeled_perf"))
pred <- predict(best_model, labeled_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label_2 = label_2 + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
capture.output(
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything"),
file = path_wd("..","performance","labeled_perf"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
pred <- predict(best_model, kdd_10_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label_1 = label_1 + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
rawdatadir=path_wd("..","performance")
if(!dir.exists(rawdatadir)) dir.create(rawdatadir,recursive = TRUE)
capture.output(
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything"),
file = path_wd("..","performance","kdd_10_perf"))
pred <- predict(best_model, labeled_test_matrix)
test_prediction <- matrix(pred, nrow = numberOfClasses,
ncol=length(pred)/numberOfClasses) %>%
t() %>%
data.frame() %>%
mutate(label_2 = label_2 + 1,
max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything")
capture.output(
confusionMatrix(factor(test_prediction$max_prob),
factor(test_prediction$label),
mode = "everything"),
file = path_wd("..","performance","labeled_perf"))
